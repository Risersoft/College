// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace klts.app.mxform.admin.Mxcollegedb
{
    public partial class MxcollegedbContext : DbContext
    {
        public MxcollegedbContext()
        {
        }

        public MxcollegedbContext(DbContextOptions<MxcollegedbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Alumni> Alumni { get; set; }
        public virtual DbSet<ClgListActivityView> ClgListActivityView { get; set; }
        public virtual DbSet<ClgListAlumniView> ClgListAlumniView { get; set; }
        public virtual DbSet<ClgListCommitteeMemberView> ClgListCommitteeMemberView { get; set; }
        public virtual DbSet<ClgListDepartmentView> ClgListDepartmentView { get; set; }
        public virtual DbSet<ClgListEventDetailView> ClgListEventDetailView { get; set; }
        public virtual DbSet<ClgListInstiView> ClgListInstiView { get; set; }
        public virtual DbSet<ClgListMediaDetailView> ClgListMediaDetailView { get; set; }
        public virtual DbSet<ClgListNaaC> ClgListNaaC { get; set; }
        public virtual DbSet<ClgListPersonsView> ClgListPersonsView { get; set; }
        public virtual DbSet<ClgListSubjectView> ClgListSubjectView { get; set; }
        public virtual DbSet<Committee> Committee { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<DegreeCourse> DegreeCourse { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<FinYears> FinYears { get; set; }
        public virtual DbSet<MediaDetail> MediaDetail { get; set; }
        public virtual DbSet<NoticeBoard> NoticeBoard { get; set; }
        public virtual DbSet<Subject> Subject { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Alumni>(entity =>
            {
                entity.HasKey(e => new { e.AlumniId, e.TenantId })
                    .HasName("PK_alumni");

                entity.HasIndex(e => e.DegreeCourseId)
                    .HasName("Indx_Alumni_DegreeCourseID");

                entity.HasIndex(e => e.DeptId)
                    .HasName("Indx_Alumni_DeptID");

                entity.HasIndex(e => e.FinYearId)
                    .HasName("Indx_Alumni_FinYearID");

                entity.HasIndex(e => e.IsApproved)
                    .HasName("Indx_Alumni_IsApproved");

                entity.HasIndex(e => e.Name)
                    .HasName("Indx_Alumni_Name");

                entity.Property(e => e.AlumniId).ValueGeneratedOnAdd();

                entity.Property(e => e.TenantId).HasDefaultValueSql("([rls].[fncGetTenantID]())");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.Alumni)
                    .HasForeignKey(d => new { d.TenantId, d.DeptId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Alumni_Department");
            });

            modelBuilder.Entity<ClgListActivityView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClgListActivityView");
            });

            modelBuilder.Entity<ClgListAlumniView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClgListAlumniView");
            });

            modelBuilder.Entity<ClgListCommitteeMemberView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClgListCommitteeMemberView");
            });

            modelBuilder.Entity<ClgListDepartmentView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClgListDepartmentView");
            });

            modelBuilder.Entity<ClgListEventDetailView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClgListEventDetailView");

                entity.Property(e => e.Summary).IsUnicode(false);
            });

            modelBuilder.Entity<ClgListInstiView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClgListInstiView");

                entity.Property(e => e.EntityName).IsUnicode(false);
            });

            modelBuilder.Entity<ClgListMediaDetailView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClgListMediaDetailView");

                entity.Property(e => e.Url).IsUnicode(false);
            });

            modelBuilder.Entity<ClgListNaaC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("clgListNaaC");
            });

            modelBuilder.Entity<ClgListPersonsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClgListPersonsView");

                entity.Property(e => e.Committee).IsUnicode(false);

                entity.Property(e => e.TopQual).IsUnicode(false);
            });

            modelBuilder.Entity<ClgListSubjectView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClgListSubjectView");
            });

            modelBuilder.Entity<Committee>(entity =>
            {
                entity.HasKey(e => new { e.TenantId, e.CommitteeId });

                entity.HasIndex(e => e.CommEdate)
                    .HasName("Indx_Committee_CommEdate");

                entity.HasIndex(e => e.CommSdate)
                    .HasName("Indx_Committee_CommSdate");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("Indx_Committee_CompanyID");

                entity.HasIndex(e => e.IsManagement)
                    .HasName("Indx_Committee_IsManagement");

                entity.HasIndex(e => e.Name)
                    .HasName("Indx_Committee_Name");

                entity.HasIndex(e => new { e.CompanyId, e.CommitteeCode, e.TenantId })
                    .HasName("IX_Committee_Committeecode")
                    .IsUnique();

                entity.Property(e => e.TenantId).HasDefaultValueSql("([rls].[fncGetTenantID]())");

                entity.Property(e => e.CommitteeId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Committee)
                    .HasForeignKey(d => new { d.TenantId, d.CompanyId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Committee_Company");
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.HasKey(e => new { e.TenantId, e.CompanyId })
                    .HasName("PK_Institution");

                entity.HasIndex(e => e.CompCode)
                    .HasName("Indx_Company_CompCode");

                entity.HasIndex(e => e.CompName)
                    .HasName("Indx_Company_CompName");

                entity.HasIndex(e => e.MainPartyId)
                    .HasName("Indx_Company_MainPartyID");

                entity.HasIndex(e => e.Pannum)
                    .HasName("Indx_Company_PANNum");

                entity.HasIndex(e => e.PrincipalPersonId)
                    .HasName("Indx_Company_PrincipalPersonID");

                entity.HasIndex(e => new { e.CompCode, e.TenantId })
                    .HasName("IX_Company_CompCode")
                    .IsUnique();

                entity.HasIndex(e => new { e.CompName, e.TenantId })
                    .HasName("IX_Company_InstiName")
                    .IsUnique();

                entity.Property(e => e.TenantId).HasDefaultValueSql("([rls].[fncGetTenantID]())");

                entity.Property(e => e.CompanyId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<DegreeCourse>(entity =>
            {
                entity.HasKey(e => new { e.TenantId, e.DegreeCourseId })
                    .HasName("PK_course");

                entity.HasIndex(e => e.Course)
                    .HasName("Indx_DegreeCourse_Course");

                entity.HasIndex(e => e.CourseType)
                    .HasName("Indx_DegreeCourse_CourseType");

                entity.Property(e => e.TenantId).HasDefaultValueSql("([rls].[fncGetTenantID]())");

                entity.Property(e => e.DegreeCourseId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.HasKey(e => new { e.TenantId, e.DeptId })
                    .HasName("PK_departmentdetail");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("Indx_Department_CompanyID");

                entity.HasIndex(e => e.DepCode)
                    .HasName("Indx_Department_DepCode");

                entity.HasIndex(e => e.DeptName)
                    .HasName("Indx_Department_DeptName");

                entity.Property(e => e.TenantId).HasDefaultValueSql("([rls].[fncGetTenantID]())");

                entity.Property(e => e.DeptId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Department)
                    .HasForeignKey(d => new { d.TenantId, d.CompanyId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Department_Company");
            });

            modelBuilder.Entity<FinYears>(entity =>
            {
                entity.HasKey(e => new { e.TenantId, e.FinYearId });

                entity.HasIndex(e => e.FinYearId)
                    .HasName("IX_FinYearID");

                entity.Property(e => e.TenantId).HasDefaultValueSql("([rls].[fncGetTenantID]())");

                entity.Property(e => e.FinYearId).ValueGeneratedOnAdd();

                entity.Property(e => e.Descrip).HasComputedColumnSql("(case when datename(year,[stdate])=datename(year,[endate]) then datename(year,[stdate]) else (datename(year,[stdate])+'-')+datename(year,[endate]) end)");
            });

            modelBuilder.Entity<MediaDetail>(entity =>
            {
                entity.HasKey(e => new { e.TenantId, e.MediaDetailId })
                    .HasName("PK_EventMedia");

                entity.HasIndex(e => e.ActivityId)
                    .HasName("Indx_MediaDetail_ActivityID");

                entity.HasIndex(e => e.EventId)
                    .HasName("Indx_MediaDetail_EventID");

                entity.HasIndex(e => e.UploadType)
                    .HasName("Indx_MediaDetail_UploadType");

                entity.Property(e => e.TenantId).HasDefaultValueSql("([rls].[fncGetTenantID]())");

                entity.Property(e => e.MediaDetailId).ValueGeneratedOnAdd();

                entity.Property(e => e.Url).IsUnicode(false);
            });

            modelBuilder.Entity<NoticeBoard>(entity =>
            {
                entity.HasKey(e => new { e.TenantId, e.NoticeBoardId })
                    .HasName("PK_noticeboard");

                entity.HasIndex(e => e.CompanyId)
                    .HasName("Indx_NoticeBoard_CompanyID");

                entity.HasIndex(e => e.Dated)
                    .HasName("Indx_NoticeBoard_Dated");

                entity.HasIndex(e => e.DeptId)
                    .HasName("Indx_NoticeBoard_DeptID");

                entity.Property(e => e.TenantId).HasDefaultValueSql("([rls].[fncGetTenantID]())");

                entity.Property(e => e.NoticeBoardId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.NoticeBoard)
                    .HasForeignKey(d => new { d.TenantId, d.DeptId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_NoticeBoard_Department");
            });

            modelBuilder.Entity<Subject>(entity =>
            {
                entity.HasKey(e => new { e.SubjectId, e.TenantId })
                    .HasName("PK_subjectdetail");

                entity.HasIndex(e => e.BedSubType)
                    .HasName("Indx_Subject_BedSubType");

                entity.HasIndex(e => e.Category)
                    .HasName("Indx_Subject_Catery");

                entity.HasIndex(e => e.ClassId)
                    .HasName("Indx_Subject_ClassID");

                entity.HasIndex(e => e.DeptId)
                    .HasName("Indx_Subject_DeptID");

                entity.HasIndex(e => e.HasPractical)
                    .HasName("Indx_Subject_HasPractical");

                entity.HasIndex(e => e.Language)
                    .HasName("Indx_Subject_Language");

                entity.Property(e => e.SubjectId).ValueGeneratedOnAdd();

                entity.Property(e => e.TenantId).HasDefaultValueSql("([rls].[fncGetTenantID]())");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}